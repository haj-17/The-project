#include <iostream>
#include <vector>
#include <string>
#include <tuple>
#include <fstream>
#include <sstream>
#include <cmath>

// RSA helper functions
long long gcd(long long a, long long b) {
    return b == 0 ? a : gcd(b, a % b);
}

long long modInverse(long long e, long long phi) {
    long long t = 0, newt = 1;
    long long r = phi, newr = e;
    while (newr != 0) {
        long long quotient = r / newr;
        std::tie(t, newt) = std::make_tuple(newt, t - quotient * newt);
        std::tie(r, newr) = std::make_tuple(newr, r - quotient * newr);
    }
    return t < 0 ? t + phi : t;
}

long long modPow(long long base, long long exp, long long mod) {
    long long result = 1;
    base %= mod;
    while (exp > 0) {
        if (exp & 1) result = (result * base) % mod;
        exp >>= 1;
        base = (base * base) % mod;
    }
    return result;
}

void generateKeyPair(long long& e, long long& d, long long& n) {
    long long p = 61, q = 53;
    n = p * q;
    long long phi = (p - 1) * (q - 1);
    e = 17;
    d = modInverse(e, phi);
}

std::string encrypt(const std::string& plaintext, long long e, long long n) {
    std::ostringstream oss;
    for (char ch : plaintext) {
        oss << modPow((long long)ch, e, n) << ' ';
    }
    return oss.str();
}

std::string decrypt(const std::string& ciphertext, long long d, long long n) {
    std::istringstream iss(ciphertext);
    std::ostringstream result;
    long long value;
    while (iss >> value) {
        result << (char)modPow(value, d, n);
    }
    return result.str();
}

// User data structure
struct User {
    std::string username;
    std::string encryptedPassword;
    std::string encryptedSecurityAnswer;
};

// File-based database functions
std::vector<User> loadUsers(const std::string& filename) {
    std::vector<User> users;
    std::ifstream infile(filename);
    if (!infile.is_open()) return users;
    std::string line;
    while (std::getline(infile, line)) {
        std::istringstream iss(line);
        User user;
        std::getline(iss, user.username, ',');
        std::getline(iss, user.encryptedPassword, ',');
        std::getline(iss, user.encryptedSecurityAnswer, ',');
        users.push_back(user);
    }
    return users;
}

void saveUsers(const std::vector<User>& users, const std::string& filename) {
    std::ofstream outfile(filename);
    for (const auto& user : users) {
        outfile << user.username << ','
                << user.encryptedPassword << ','
                << user.encryptedSecurityAnswer << '\n';
    }
}

// Authentication functions
bool login(const std::vector<User>& users, const std::string& username, const std::string& password,
           long long e, long long n) {
    for (const auto& user : users) {
        if (user.username == username) {
            return encrypt(password, e, n) == user.encryptedPassword;
        }
    }
    return false;
}

bool registerUser(std::vector<User>& users, const std::string& username,
                  const std::string& password, const std::string& securityAnswer,
                  long long e, long long n) {
    for (const auto& user : users) {
        if (user.username == username) return false;
    }
    User newUser;
    newUser.username = username;
    newUser.encryptedPassword = encrypt(password, e, n);
    newUser.encryptedSecurityAnswer = encrypt(securityAnswer, e, n);
    users.push_back(newUser);
    return true;
}

// Password recovery function
bool resetPassword(std::vector<User>& users, const std::string& username,
                   const std::string& securityAnswer, const std::string& newPassword,
                   long long e, long long d, long long n) {
    for (auto& user : users) {
        if (user.username == username) {
            if (decrypt(user.encryptedSecurityAnswer, d, n) == securityAnswer) {
                user.encryptedPassword = encrypt(newPassword, e, n);
                return true;
            }
            return false;
        }
    }
    return false;
}

int main() {
    std::vector<User> users = loadUsers("users.txt");

    long long e, d, n;
    generateKeyPair(e, d, n);

    int choice;
    std::string username, password, answer, newPassword;

    do {
        std::cout << "\n--- Secure Login System ---\n"
                  << "1. Login\n"
                  << "2. Register\n"
                  << "3. Reset Password\n"
                  << "4. Exit\n"
                  << "Choose an option: ";
        std::cin >> choice;
        std::cin.ignore();

        switch (choice) {
            case 1:
                std::cout << "Username: ";
                std::getline(std::cin, username);
                std::cout << "Password: ";
                std::getline(std::cin, password);
                if (login(users, username, password, e, n))
                    std::cout << "Login successful!\n";
                else
                    std::cout << "Login failed.\n";
                break;
            case 2:
                std::cout << "New Username: ";
                std::getline(std::cin, username);
                std::cout << "Password: ";
                std::getline(std::cin, password);
                std::cout << "Security Answer: ";
                std::getline(std::cin, answer);
                if (registerUser(users, username, password, answer, e, n))
                    std::cout << "Registration successful!\n";
                else
                    std::cout << "Username already taken.\n";
                break;
            case 3:
                std::cout << "Username: ";
                std::getline(std::cin, username);
                std::cout << "Security Answer: ";
                std::getline(std::cin, answer);
                std::cout << "New Password: ";
                std::getline(std::cin, newPassword);
                if (resetPassword(users, username, answer, newPassword, e, d, n))
                    std::cout << "Password reset successful!\n";
                else
                    std::cout << "Security answer incorrect.\n";
                break;
            case 4:
                saveUsers(users, "users.txt");
                std::cout << "Data saved. Goodbye!\n";
                break;
            default:
                std::cout << "Invalid option.\n";
        }
    } while (choice != 4);

    return 0;
}
